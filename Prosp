#!/usr/bin/python -i

CloudOpenLevel=5900   #Open if cloud < this for more than WeatherOpenDelay sec
CloudCloseLevel=6000  #Close is cloud > this or raining
WeatherOpenDelay=1800  #Wait for 1800 sec of no-rain and cloud < CloudOpenLevel

WeatherActive=0       #0 for disabled, 1 for rain only, 2 for rain and cloud.

try:
  import readline
except ImportError:
  ewrite("Module readline not available.")
else:
  import rlcompleter
  readline.parse_and_bind("tab: complete")

import Ariel
import ArCommands

import sys
import signal     #Makes sure interrupts received only by main thread
import time       #for the 'sleep' function
import improc
from improc import reduce
import autorun
from autorun import auto
import planet
from planet import *
import teljoy
from teljoy import *
import weather
from globals import *
import utils
from utils import *
import ephemint
from ephemint import *
import __builtin__



def help(func):
  "Usage: help(function) to find out information about that function"
  if type(func)==type(''):
    print "     "+getattr(__builtin__.globals()[func],'func_doc')
  else:
    print "     "+func.func_doc




status=Ariel.ArielStatus()  #Define a status variable using the new class
status.TJ=teljoy.status
status.TJ.updated=status.updated  #Flag main status updated when TJ changes
status.weather=weather.status

Ariel.status=status        #Make it the interface libraries status global
ArCommands.status=status   #And the Ariel commands module
autorun.status=status     #And the AutoRun libraries status global too
utils.status=status       #And the utility commands module
sys.path=sys.path+['.']   #Allow user-written modules in current dir to load


try:
  Ariel.init()        #Call the init() function in the library to open
                      #communications with the camera
except Ariel.ArielError:
  ewrite("Ariel init failed.")
  ewrite("Another program is using the Ariel++ interface to control the AP7.")
  print "Continuing without access to the AP7 hardware - to connect to the "
  print "camera, quit this program, quit from or kill the other instance of"
  print "Prosp, and restart. Use 'ps -a' to find other instances of the"
  print "program."
else:
  swrite("Ariel init succeeded, contact with AP7 established.")
  from ArCommands import *
  if not teljoy.Background.isAlive():
    teljoy.Background.start()

