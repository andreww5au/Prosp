#!/usr/bin/python2 -i

backgrounds=[]

try:
  import readline
except ImportError:
  ewrite("Module readline not available.")
else:
  import rlcompleter
  readline.parse_and_bind("tab: complete")

import Ariel
import ArCommands

import sys
import time       #for the 'sleep' function
import improc
from improc import reduce
import autorun
from autorun import auto
import planet
from planet import *
import teljoy
from teljoy import *
import weather

backgrounds.append(teljoy._background)
backgrounds.append(weather._background)

from globals import *
import utils
from utils import *
import ephemint
from ephemint import *


def help(func):
  "Usage: help(function) to find out information about that function"
  if type(func)==type(''):
    print "     "+getattr(__builtins__.globals()[func],'func_doc')
  else:
    print "     "+func.func_doc


def _background():
  "Call each of the registered background functions every 5 seconds"
  while 1:

    if status.weather.WeatherActive:
      if status.weather.Clear.isSet() and (not teljoy.Active.isSet()):
        teljoy.unpause()
      if (not status.weather.Clear.isSet()) and teljoy.Active.isSet():
        teljoy.pause()
      if (not ephemint.isdark()) and teljoy.Active.isSet():
        print "End of the night, pausing forever. To resume,"
        print "type 'status.weather.WeatherActive=0', then 'teljoy.unpause()'"
        teljoy.pause()

    for f in backgrounds:
      f()
    time.sleep(5)


class Prompt:
  """Class to assign to sys.ps1, str() method is called every time a prompt is
     printed. Used to make sure that the background thread is still alive.
  """
  def __str__(self):
    global BGThread
    if GotAriel:
      if not BGThread.isAlive():
        BGThread=threading.Thread(group=None,
                                  target=_background)
        BGThread.setDaemon(1)
        BGThread.start()
    return ">>>"


sys.ps1=Prompt() 

status=Ariel.ArielStatus()  #Define a status variable using the new class
status.TJ=teljoy.status
status.TJ.updated=status.updated  #Flag main status updated when TJ changes
status.weather=weather.status


Ariel.status=status        #Make it the interface libraries status global
ArCommands.status=status   #And the Ariel commands module
autorun.status=status     #And the AutoRun libraries status global too
utils.status=status       #And the utility commands module
sys.path=sys.path+['.']   #Allow user-written modules in current dir to load


try:
  Ariel.init()        #Call the init() function in the library to open
                      #communications with the camera
except Ariel.ArielError:
  GotAriel=0
  ewrite("Ariel init failed.")
  ewrite("Another program is using the Ariel++ interface to control the AP7.")
  print "Continuing without access to the AP7 hardware - to connect to the "
  print "camera, quit this program, quit from or kill the other instance of"
  print "Prosp, and restart. Use 'ps -a' to find other instances of the"
  print "program."
else:
  GotAriel=1
  swrite("Ariel init succeeded, contact with AP7 established.")
  from ArCommands import *


if GotAriel:
  BGThread=threading.Thread(group=None,
                     target=_background)
  BGThread.setDaemon(1)
  BGThread.start()

