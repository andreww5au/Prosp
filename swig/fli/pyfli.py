# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyfli', [dirname(__file__)])
        except ImportError:
            import _pyfli
            return _pyfli
        if fp is not None:
            try:
                _mod = imp.load_module('_pyfli', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyfli = swig_import_helper()
    del swig_import_helper
else:
    import _pyfli
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class longp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, longp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, longp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyfli.new_longp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfli.delete_longp
    __del__ = lambda self : None;
    def assign(self, *args): return _pyfli.longp_assign(self, *args)
    def value(self): return _pyfli.longp_value(self)
    def cast(self): return _pyfli.longp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyfli.longp_frompointer
    if _newclass:frompointer = staticmethod(_pyfli.longp_frompointer)
longp_swigregister = _pyfli.longp_swigregister
longp_swigregister(longp)

def longp_frompointer(*args):
  return _pyfli.longp_frompointer(*args)
longp_frompointer = _pyfli.longp_frompointer

class size_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, size_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, size_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyfli.new_size_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfli.delete_size_t
    __del__ = lambda self : None;
    def assign(self, *args): return _pyfli.size_t_assign(self, *args)
    def value(self): return _pyfli.size_t_value(self)
    def cast(self): return _pyfli.size_t_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyfli.size_t_frompointer
    if _newclass:frompointer = staticmethod(_pyfli.size_t_frompointer)
size_t_swigregister = _pyfli.size_t_swigregister
size_t_swigregister(size_t)

def size_t_frompointer(*args):
  return _pyfli.size_t_frompointer(*args)
size_t_frompointer = _pyfli.size_t_frompointer

class ulongp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ulongp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ulongp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyfli.new_ulongp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfli.delete_ulongp
    __del__ = lambda self : None;
    def assign(self, *args): return _pyfli.ulongp_assign(self, *args)
    def value(self): return _pyfli.ulongp_value(self)
    def cast(self): return _pyfli.ulongp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyfli.ulongp_frompointer
    if _newclass:frompointer = staticmethod(_pyfli.ulongp_frompointer)
ulongp_swigregister = _pyfli.ulongp_swigregister
ulongp_swigregister(ulongp)

def ulongp_frompointer(*args):
  return _pyfli.ulongp_frompointer(*args)
ulongp_frompointer = _pyfli.ulongp_frompointer

class uintp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uintp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uintp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyfli.new_uintp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfli.delete_uintp
    __del__ = lambda self : None;
    def assign(self, *args): return _pyfli.uintp_assign(self, *args)
    def value(self): return _pyfli.uintp_value(self)
    def cast(self): return _pyfli.uintp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyfli.uintp_frompointer
    if _newclass:frompointer = staticmethod(_pyfli.uintp_frompointer)
uintp_swigregister = _pyfli.uintp_swigregister
uintp_swigregister(uintp)

def uintp_frompointer(*args):
  return _pyfli.uintp_frompointer(*args)
uintp_frompointer = _pyfli.uintp_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyfli.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfli.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return _pyfli.intp_assign(self, *args)
    def value(self): return _pyfli.intp_value(self)
    def cast(self): return _pyfli.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyfli.intp_frompointer
    if _newclass:frompointer = staticmethod(_pyfli.intp_frompointer)
intp_swigregister = _pyfli.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return _pyfli.intp_frompointer(*args)
intp_frompointer = _pyfli.intp_frompointer

class floatp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyfli.new_floatp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfli.delete_floatp
    __del__ = lambda self : None;
    def assign(self, *args): return _pyfli.floatp_assign(self, *args)
    def value(self): return _pyfli.floatp_value(self)
    def cast(self): return _pyfli.floatp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyfli.floatp_frompointer
    if _newclass:frompointer = staticmethod(_pyfli.floatp_frompointer)
floatp_swigregister = _pyfli.floatp_swigregister
floatp_swigregister(floatp)

def floatp_frompointer(*args):
  return _pyfli.floatp_frompointer(*args)
floatp_frompointer = _pyfli.floatp_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyfli.new_doublep()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfli.delete_doublep
    __del__ = lambda self : None;
    def assign(self, *args): return _pyfli.doublep_assign(self, *args)
    def value(self): return _pyfli.doublep_value(self)
    def cast(self): return _pyfli.doublep_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyfli.doublep_frompointer
    if _newclass:frompointer = staticmethod(_pyfli.doublep_frompointer)
doublep_swigregister = _pyfli.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(*args):
  return _pyfli.doublep_frompointer(*args)
doublep_frompointer = _pyfli.doublep_frompointer

FLI_INVALID_DEVICE = _pyfli.FLI_INVALID_DEVICE
FLIDOMAIN_NONE = _pyfli.FLIDOMAIN_NONE
FLIDOMAIN_PARALLEL_PORT = _pyfli.FLIDOMAIN_PARALLEL_PORT
FLIDOMAIN_USB = _pyfli.FLIDOMAIN_USB
FLIDOMAIN_SERIAL = _pyfli.FLIDOMAIN_SERIAL
FLIDOMAIN_INET = _pyfli.FLIDOMAIN_INET
FLIDOMAIN_SERIAL_19200 = _pyfli.FLIDOMAIN_SERIAL_19200
FLIDOMAIN_SERIAL_1200 = _pyfli.FLIDOMAIN_SERIAL_1200
FLIDEVICE_NONE = _pyfli.FLIDEVICE_NONE
FLIDEVICE_CAMERA = _pyfli.FLIDEVICE_CAMERA
FLIDEVICE_FILTERWHEEL = _pyfli.FLIDEVICE_FILTERWHEEL
FLIDEVICE_FOCUSER = _pyfli.FLIDEVICE_FOCUSER
FLIDEVICE_HS_FILTERWHEEL = _pyfli.FLIDEVICE_HS_FILTERWHEEL
FLIDEVICE_RAW = _pyfli.FLIDEVICE_RAW
FLIDEVICE_ENUMERATE_BY_CONNECTION = _pyfli.FLIDEVICE_ENUMERATE_BY_CONNECTION
FLI_FRAME_TYPE_NORMAL = _pyfli.FLI_FRAME_TYPE_NORMAL
FLI_FRAME_TYPE_DARK = _pyfli.FLI_FRAME_TYPE_DARK
FLI_FRAME_TYPE_FLOOD = _pyfli.FLI_FRAME_TYPE_FLOOD
FLI_FRAME_TYPE_RBI_FLUSH = _pyfli.FLI_FRAME_TYPE_RBI_FLUSH
FLI_MODE_8BIT = _pyfli.FLI_MODE_8BIT
FLI_MODE_16BIT = _pyfli.FLI_MODE_16BIT
FLI_SHUTTER_CLOSE = _pyfli.FLI_SHUTTER_CLOSE
FLI_SHUTTER_OPEN = _pyfli.FLI_SHUTTER_OPEN
FLI_SHUTTER_EXTERNAL_TRIGGER = _pyfli.FLI_SHUTTER_EXTERNAL_TRIGGER
FLI_SHUTTER_EXTERNAL_TRIGGER_LOW = _pyfli.FLI_SHUTTER_EXTERNAL_TRIGGER_LOW
FLI_SHUTTER_EXTERNAL_TRIGGER_HIGH = _pyfli.FLI_SHUTTER_EXTERNAL_TRIGGER_HIGH
FLI_SHUTTER_EXTERNAL_EXPOSURE_CONTROL = _pyfli.FLI_SHUTTER_EXTERNAL_EXPOSURE_CONTROL
FLI_BGFLUSH_STOP = _pyfli.FLI_BGFLUSH_STOP
FLI_BGFLUSH_START = _pyfli.FLI_BGFLUSH_START
FLI_TEMPERATURE_INTERNAL = _pyfli.FLI_TEMPERATURE_INTERNAL
FLI_TEMPERATURE_EXTERNAL = _pyfli.FLI_TEMPERATURE_EXTERNAL
FLI_TEMPERATURE_CCD = _pyfli.FLI_TEMPERATURE_CCD
FLI_TEMPERATURE_BASE = _pyfli.FLI_TEMPERATURE_BASE
FLI_CAMERA_STATUS_UNKNOWN = _pyfli.FLI_CAMERA_STATUS_UNKNOWN
FLI_CAMERA_STATUS_MASK = _pyfli.FLI_CAMERA_STATUS_MASK
FLI_CAMERA_STATUS_IDLE = _pyfli.FLI_CAMERA_STATUS_IDLE
FLI_CAMERA_STATUS_WAITING_FOR_TRIGGER = _pyfli.FLI_CAMERA_STATUS_WAITING_FOR_TRIGGER
FLI_CAMERA_STATUS_EXPOSING = _pyfli.FLI_CAMERA_STATUS_EXPOSING
FLI_CAMERA_STATUS_READING_CCD = _pyfli.FLI_CAMERA_STATUS_READING_CCD
FLI_CAMERA_DATA_READY = _pyfli.FLI_CAMERA_DATA_READY
FLI_FOCUSER_STATUS_UNKNOWN = _pyfli.FLI_FOCUSER_STATUS_UNKNOWN
FLI_FOCUSER_STATUS_HOMING = _pyfli.FLI_FOCUSER_STATUS_HOMING
FLI_FOCUSER_STATUS_MOVING_IN = _pyfli.FLI_FOCUSER_STATUS_MOVING_IN
FLI_FOCUSER_STATUS_MOVING_OUT = _pyfli.FLI_FOCUSER_STATUS_MOVING_OUT
FLI_FOCUSER_STATUS_MOVING_MASK = _pyfli.FLI_FOCUSER_STATUS_MOVING_MASK
FLI_FOCUSER_STATUS_HOME = _pyfli.FLI_FOCUSER_STATUS_HOME
FLI_FOCUSER_STATUS_LIMIT = _pyfli.FLI_FOCUSER_STATUS_LIMIT
FLI_FOCUSER_STATUS_LEGACY = _pyfli.FLI_FOCUSER_STATUS_LEGACY
FLI_FILTER_WHEEL_PHYSICAL = _pyfli.FLI_FILTER_WHEEL_PHYSICAL
FLI_FILTER_WHEEL_VIRTUAL = _pyfli.FLI_FILTER_WHEEL_VIRTUAL
FLI_FILTER_WHEEL_LEFT = _pyfli.FLI_FILTER_WHEEL_LEFT
FLI_FILTER_WHEEL_RIGHT = _pyfli.FLI_FILTER_WHEEL_RIGHT
FLI_FILTER_STATUS_MOVING_CCW = _pyfli.FLI_FILTER_STATUS_MOVING_CCW
FLI_FILTER_STATUS_MOVING_CW = _pyfli.FLI_FILTER_STATUS_MOVING_CW
FLI_FILTER_POSITION_UNKNOWN = _pyfli.FLI_FILTER_POSITION_UNKNOWN
FLI_FILTER_POSITION_CURRENT = _pyfli.FLI_FILTER_POSITION_CURRENT
FLI_FILTER_STATUS_HOMING = _pyfli.FLI_FILTER_STATUS_HOMING
FLI_FILTER_STATUS_HOME = _pyfli.FLI_FILTER_STATUS_HOME
FLI_FILTER_STATUS_HOME_LEFT = _pyfli.FLI_FILTER_STATUS_HOME_LEFT
FLI_FILTER_STATUS_HOME_RIGHT = _pyfli.FLI_FILTER_STATUS_HOME_RIGHT
FLI_FILTER_STATUS_HOME_SUCCEEDED = _pyfli.FLI_FILTER_STATUS_HOME_SUCCEEDED
FLIDEBUG_NONE = _pyfli.FLIDEBUG_NONE
FLIDEBUG_INFO = _pyfli.FLIDEBUG_INFO
FLIDEBUG_WARN = _pyfli.FLIDEBUG_WARN
FLIDEBUG_FAIL = _pyfli.FLIDEBUG_FAIL
FLIDEBUG_IO = _pyfli.FLIDEBUG_IO
FLIDEBUG_ALL = _pyfli.FLIDEBUG_ALL
FLI_IO_P0 = _pyfli.FLI_IO_P0
FLI_IO_P1 = _pyfli.FLI_IO_P1
FLI_IO_P2 = _pyfli.FLI_IO_P2
FLI_IO_P3 = _pyfli.FLI_IO_P3
FLI_FAN_SPEED_OFF = _pyfli.FLI_FAN_SPEED_OFF
FLI_FAN_SPEED_ON = _pyfli.FLI_FAN_SPEED_ON
FLI_EEPROM_USER = _pyfli.FLI_EEPROM_USER
FLI_EEPROM_PIXEL_MAP = _pyfli.FLI_EEPROM_PIXEL_MAP
FLI_PIXEL_DEFECT_COLUMN = _pyfli.FLI_PIXEL_DEFECT_COLUMN
FLI_PIXEL_DEFECT_CLUSTER = _pyfli.FLI_PIXEL_DEFECT_CLUSTER
FLI_PIXEL_DEFECT_POINT_BRIGHT = _pyfli.FLI_PIXEL_DEFECT_POINT_BRIGHT
FLI_PIXEL_DEFECT_POINT_DARK = _pyfli.FLI_PIXEL_DEFECT_POINT_DARK

def FLIOpen(*args):
  return _pyfli.FLIOpen(*args)
FLIOpen = _pyfli.FLIOpen

def FLISetDebugLevel(*args):
  return _pyfli.FLISetDebugLevel(*args)
FLISetDebugLevel = _pyfli.FLISetDebugLevel

def FLIClose(*args):
  return _pyfli.FLIClose(*args)
FLIClose = _pyfli.FLIClose

def FLIGetLibVersion(*args):
  return _pyfli.FLIGetLibVersion(*args)
FLIGetLibVersion = _pyfli.FLIGetLibVersion

def FLIGetModel(*args):
  return _pyfli.FLIGetModel(*args)
FLIGetModel = _pyfli.FLIGetModel

def FLIGetPixelSize(*args):
  return _pyfli.FLIGetPixelSize(*args)
FLIGetPixelSize = _pyfli.FLIGetPixelSize

def FLIGetHWRevision(*args):
  return _pyfli.FLIGetHWRevision(*args)
FLIGetHWRevision = _pyfli.FLIGetHWRevision

def FLIGetFWRevision(*args):
  return _pyfli.FLIGetFWRevision(*args)
FLIGetFWRevision = _pyfli.FLIGetFWRevision

def FLIGetArrayArea(*args):
  return _pyfli.FLIGetArrayArea(*args)
FLIGetArrayArea = _pyfli.FLIGetArrayArea

def FLIGetVisibleArea(*args):
  return _pyfli.FLIGetVisibleArea(*args)
FLIGetVisibleArea = _pyfli.FLIGetVisibleArea

def FLISetExposureTime(*args):
  return _pyfli.FLISetExposureTime(*args)
FLISetExposureTime = _pyfli.FLISetExposureTime

def FLISetImageArea(*args):
  return _pyfli.FLISetImageArea(*args)
FLISetImageArea = _pyfli.FLISetImageArea

def FLISetHBin(*args):
  return _pyfli.FLISetHBin(*args)
FLISetHBin = _pyfli.FLISetHBin

def FLISetVBin(*args):
  return _pyfli.FLISetVBin(*args)
FLISetVBin = _pyfli.FLISetVBin

def FLISetFrameType(*args):
  return _pyfli.FLISetFrameType(*args)
FLISetFrameType = _pyfli.FLISetFrameType

def FLICancelExposure(*args):
  return _pyfli.FLICancelExposure(*args)
FLICancelExposure = _pyfli.FLICancelExposure

def FLIGetExposureStatus(*args):
  return _pyfli.FLIGetExposureStatus(*args)
FLIGetExposureStatus = _pyfli.FLIGetExposureStatus

def FLISetTemperature(*args):
  return _pyfli.FLISetTemperature(*args)
FLISetTemperature = _pyfli.FLISetTemperature

def FLIGetTemperature(*args):
  return _pyfli.FLIGetTemperature(*args)
FLIGetTemperature = _pyfli.FLIGetTemperature

def FLIGetCoolerPower(*args):
  return _pyfli.FLIGetCoolerPower(*args)
FLIGetCoolerPower = _pyfli.FLIGetCoolerPower

def FLIGrabRow(*args):
  return _pyfli.FLIGrabRow(*args)
FLIGrabRow = _pyfli.FLIGrabRow

def FLIExposeFrame(*args):
  return _pyfli.FLIExposeFrame(*args)
FLIExposeFrame = _pyfli.FLIExposeFrame

def FLIFlushRow(*args):
  return _pyfli.FLIFlushRow(*args)
FLIFlushRow = _pyfli.FLIFlushRow

def FLISetNFlushes(*args):
  return _pyfli.FLISetNFlushes(*args)
FLISetNFlushes = _pyfli.FLISetNFlushes

def FLISetBitDepth(*args):
  return _pyfli.FLISetBitDepth(*args)
FLISetBitDepth = _pyfli.FLISetBitDepth

def FLIReadIOPort(*args):
  return _pyfli.FLIReadIOPort(*args)
FLIReadIOPort = _pyfli.FLIReadIOPort

def FLIWriteIOPort(*args):
  return _pyfli.FLIWriteIOPort(*args)
FLIWriteIOPort = _pyfli.FLIWriteIOPort

def FLIConfigureIOPort(*args):
  return _pyfli.FLIConfigureIOPort(*args)
FLIConfigureIOPort = _pyfli.FLIConfigureIOPort

def FLILockDevice(*args):
  return _pyfli.FLILockDevice(*args)
FLILockDevice = _pyfli.FLILockDevice

def FLIUnlockDevice(*args):
  return _pyfli.FLIUnlockDevice(*args)
FLIUnlockDevice = _pyfli.FLIUnlockDevice

def FLIControlShutter(*args):
  return _pyfli.FLIControlShutter(*args)
FLIControlShutter = _pyfli.FLIControlShutter

def FLIControlBackgroundFlush(*args):
  return _pyfli.FLIControlBackgroundFlush(*args)
FLIControlBackgroundFlush = _pyfli.FLIControlBackgroundFlush

def FLISetDAC(*args):
  return _pyfli.FLISetDAC(*args)
FLISetDAC = _pyfli.FLISetDAC

def FLIList(*args):
  return _pyfli.FLIList(*args)
FLIList = _pyfli.FLIList

def FLIFreeList(*args):
  return _pyfli.FLIFreeList(*args)
FLIFreeList = _pyfli.FLIFreeList

def FLIGetFilterName(*args):
  return _pyfli.FLIGetFilterName(*args)
FLIGetFilterName = _pyfli.FLIGetFilterName

def FLISetActiveWheel(*args):
  return _pyfli.FLISetActiveWheel(*args)
FLISetActiveWheel = _pyfli.FLISetActiveWheel

def FLIGetActiveWheel(*args):
  return _pyfli.FLIGetActiveWheel(*args)
FLIGetActiveWheel = _pyfli.FLIGetActiveWheel

def FLISetFilterPos(*args):
  return _pyfli.FLISetFilterPos(*args)
FLISetFilterPos = _pyfli.FLISetFilterPos

def FLIGetFilterPos(*args):
  return _pyfli.FLIGetFilterPos(*args)
FLIGetFilterPos = _pyfli.FLIGetFilterPos

def FLIGetFilterCount(*args):
  return _pyfli.FLIGetFilterCount(*args)
FLIGetFilterCount = _pyfli.FLIGetFilterCount

def FLIStepMotor(*args):
  return _pyfli.FLIStepMotor(*args)
FLIStepMotor = _pyfli.FLIStepMotor

def FLIStepMotorAsync(*args):
  return _pyfli.FLIStepMotorAsync(*args)
FLIStepMotorAsync = _pyfli.FLIStepMotorAsync

def FLIGetStepperPosition(*args):
  return _pyfli.FLIGetStepperPosition(*args)
FLIGetStepperPosition = _pyfli.FLIGetStepperPosition

def FLIGetStepsRemaining(*args):
  return _pyfli.FLIGetStepsRemaining(*args)
FLIGetStepsRemaining = _pyfli.FLIGetStepsRemaining

def FLIHomeFocuser(*args):
  return _pyfli.FLIHomeFocuser(*args)
FLIHomeFocuser = _pyfli.FLIHomeFocuser

def FLICreateList(*args):
  return _pyfli.FLICreateList(*args)
FLICreateList = _pyfli.FLICreateList

def FLIDeleteList():
  return _pyfli.FLIDeleteList()
FLIDeleteList = _pyfli.FLIDeleteList

def FLIListFirst(*args):
  return _pyfli.FLIListFirst(*args)
FLIListFirst = _pyfli.FLIListFirst

def FLIListNext(*args):
  return _pyfli.FLIListNext(*args)
FLIListNext = _pyfli.FLIListNext

def FLIReadTemperature(*args):
  return _pyfli.FLIReadTemperature(*args)
FLIReadTemperature = _pyfli.FLIReadTemperature

def FLIGetFocuserExtent(*args):
  return _pyfli.FLIGetFocuserExtent(*args)
FLIGetFocuserExtent = _pyfli.FLIGetFocuserExtent

def FLIUsbBulkIO(*args):
  return _pyfli.FLIUsbBulkIO(*args)
FLIUsbBulkIO = _pyfli.FLIUsbBulkIO

def FLIGetDeviceStatus(*args):
  return _pyfli.FLIGetDeviceStatus(*args)
FLIGetDeviceStatus = _pyfli.FLIGetDeviceStatus

def FLIGetCameraModeString(*args):
  return _pyfli.FLIGetCameraModeString(*args)
FLIGetCameraModeString = _pyfli.FLIGetCameraModeString

def FLIGetCameraMode(*args):
  return _pyfli.FLIGetCameraMode(*args)
FLIGetCameraMode = _pyfli.FLIGetCameraMode

def FLISetCameraMode(*args):
  return _pyfli.FLISetCameraMode(*args)
FLISetCameraMode = _pyfli.FLISetCameraMode

def FLIHomeDevice(*args):
  return _pyfli.FLIHomeDevice(*args)
FLIHomeDevice = _pyfli.FLIHomeDevice

def FLIGrabFrame(*args):
  return _pyfli.FLIGrabFrame(*args)
FLIGrabFrame = _pyfli.FLIGrabFrame

def FLISetTDI(*args):
  return _pyfli.FLISetTDI(*args)
FLISetTDI = _pyfli.FLISetTDI

def FLIGrabVideoFrame(*args):
  return _pyfli.FLIGrabVideoFrame(*args)
FLIGrabVideoFrame = _pyfli.FLIGrabVideoFrame

def FLIStopVideoMode(*args):
  return _pyfli.FLIStopVideoMode(*args)
FLIStopVideoMode = _pyfli.FLIStopVideoMode

def FLIStartVideoMode(*args):
  return _pyfli.FLIStartVideoMode(*args)
FLIStartVideoMode = _pyfli.FLIStartVideoMode

def FLIGetSerialString(*args):
  return _pyfli.FLIGetSerialString(*args)
FLIGetSerialString = _pyfli.FLIGetSerialString

def FLIEndExposure(*args):
  return _pyfli.FLIEndExposure(*args)
FLIEndExposure = _pyfli.FLIEndExposure

def FLITriggerExposure(*args):
  return _pyfli.FLITriggerExposure(*args)
FLITriggerExposure = _pyfli.FLITriggerExposure

def FLISetFanSpeed(*args):
  return _pyfli.FLISetFanSpeed(*args)
FLISetFanSpeed = _pyfli.FLISetFanSpeed

def FLISetVerticalTableEntry(*args):
  return _pyfli.FLISetVerticalTableEntry(*args)
FLISetVerticalTableEntry = _pyfli.FLISetVerticalTableEntry

def FLIGetVerticalTableEntry(*args):
  return _pyfli.FLIGetVerticalTableEntry(*args)
FLIGetVerticalTableEntry = _pyfli.FLIGetVerticalTableEntry

def FLIGetReadoutDimensions(*args):
  return _pyfli.FLIGetReadoutDimensions(*args)
FLIGetReadoutDimensions = _pyfli.FLIGetReadoutDimensions

def FLIEnableVerticalTable(*args):
  return _pyfli.FLIEnableVerticalTable(*args)
FLIEnableVerticalTable = _pyfli.FLIEnableVerticalTable

def FLIReadUserEEPROM(*args):
  return _pyfli.FLIReadUserEEPROM(*args)
FLIReadUserEEPROM = _pyfli.FLIReadUserEEPROM

def FLIWriteUserEEPROM(*args):
  return _pyfli.FLIWriteUserEEPROM(*args)
FLIWriteUserEEPROM = _pyfli.FLIWriteUserEEPROM
# This file is compatible with both classic and new-style classes.


